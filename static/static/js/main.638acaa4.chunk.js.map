{"version":3,"sources":["components/LineGraph.tsx","components/Interface.tsx","components/URL.tsx","components/NeedFunc.tsx","components/IntervalForm.tsx","components/Period.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["LineChart","props","paramLine","fill","lineTension","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointRadius","pointHitRadius","data","labels","flat","datasets","label","borderColor","values","max","middle","min","className","options","scales","xAxes","gridLines","display","yAxes","ticks","beginAtZero","userCallback","value","toString","split","join","legend","position","tooltips","enabled","zeroValues","URL","calcInterval","date1","date2","setDateTime","datetime","addTime","timeOrDate","outDate","Date","valueOf","getFullYear","getMonth","getDate","getMinutes","getHours","IntervalForm","useForm","register","handleSubmit","watch","useState","currentDate","setCurrentDate","curHideBut","setHideBut","useEffect","hideBut","console","log","formPeriod","onSubmit","deleg2","deleg1","cd","time","nd","addMinute","replace","type","name","ref","defaultValue","onClick","Period","str","setStr","fromTime","fromDate","toTime","toDate","Boolean","window","location","hostname","match","render","isLoading","setIsLoading","setlabels","setValues","setFromDate","setFromTime","setToDate","setToTime","axiosRequest","arr","url","axios","then","response","setData","catch","error","finally","map","el","ind","temp","Math","floor","parse","Array","minValues","minValue","middleValues","avgValue","maxValues","maxValue","postURL","d1","t1","d2","t2","length","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.638acaa4.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { Line } from 'react-chartjs-2';\r\nimport '../css/LineGraph.css';\r\nimport { DefaultDataChart } from './Interface';\r\n\r\n\r\nexport const LineChart = (props: DefaultDataChart): React.ReactElement => {\r\n  const paramLine = {\r\n    fill: false,\r\n    lineTension: 0.1,\r\n    pointBorderWidth: 1,\r\n    pointHoverRadius: 5,\r\n    pointHoverBackgroundColor: 'rgba(0,0,0,0.5)',\r\n    pointRadius: 1,\r\n    pointHitRadius: 10,       \r\n    // borderCapStyle: 'butt',  \r\n    // borderDash: [],\r\n    // borderDashOffset: 0.0,\r\n    // borderJoinStyle: 'miter',\r\n    // pointBorderColor: 'rgba(75,192,192,1)',\r\n    // pointBackgroundColor: '#fff',\r\n    // pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n    // pointHoverBorderWidth: 2,\r\n  }\r\n\r\n  const data = {\r\n    labels: props.labels.flat(),\r\n    datasets: [\r\n      {\r\n        label: 'max',\r\n        ...paramLine,\r\n        borderColor: 'rgba(192,75,75,1)', \r\n        data: props.values.max.flat(),\r\n      },\r\n      {\r\n        label: 'average',\r\n        ...paramLine,\r\n        borderColor: 'rgba(75,192,192,1)', \r\n        data: props.values.middle.flat(),\r\n      },\r\n      {\r\n        label: 'min',\r\n        ...paramLine,\r\n        borderColor: 'rgba(75,192,75,1)', \r\n        data: props.values.min.flat(),\r\n      },\r\n    ]\r\n  };\r\n  \r\n  const lineOptions = {\r\n    scales: {\r\n      xAxes: [{\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n      }],\r\n      yAxes: [{\r\n        gridLines: {\r\n          display: true,\r\n        },\r\n        ticks: {\r\n          beginAtZero: true,\r\n          // Return an empty string to draw the tick line but hide the tick label\r\n          // Return `null` or `undefined` to hide the tick line entirely\r\n          userCallback(value: any) {\r\n            // Convert the number to a string and splite the string every 3 charaters from the end\r\n            value = value.toString();\r\n            value = value.split(/(?=(?:...)*$)/);\r\n  \r\n            // Convert the array to a string and format the output\r\n            value = value.join('.');\r\n            return `${value}`;\r\n          },\r\n        },\r\n      }],\r\n    },\r\n    legend: {\r\n      display: true,\r\n      position: 'right',\r\n    },\r\n    tooltips: {\r\n      enabled: true,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className = \"graph\">\r\n      <Line data={data} options={lineOptions} />\r\n    </div>\r\n  )\r\n}","\r\nexport interface DefaultValues {\r\n  min : Array<number>,\r\n  middle: Array<number>,\r\n  max: Array<number>,\r\n};\r\n\r\nexport interface DefaultDataChart {\r\n  labels : Array<string>,\r\n  values:  DefaultValues,\r\n};\r\n\r\nexport interface DefaultGetData {\r\n  maxValue: number,\r\n  avgValue: number,\r\n  minValue: number,\r\n  datetime: string,\r\n}\r\n\r\nexport interface DefaultDatetime {\r\n  fromDate: string,\r\n  fromTime: string,\r\n  toDate: string,\r\n  toTime: string,\r\n}\r\n\r\nexport interface DefaultPropsForm {\r\n  deleg1: (x: string) => void,\r\n  deleg2: (s1:string, s2:string, s3:string, s4:string) => void,\r\n}\r\n\r\nexport const zeroValues: DefaultValues = {\r\n  min : [],\r\n  middle : [],\r\n  max : [],\r\n}\r\n\r\n\r\n\r\n","\r\nexport const URL = 'https://rocky-sea-48152.herokuapp.com/history';","import React from 'react';\r\n\r\nexport const calcInterval = (date1: number, date2: number) => {\r\n  if ((date2 - date1) / 60000 > 2) {\r\n    return (date2 - date1) / 60000 - 1;\r\n  }\r\n  else {\r\n    return 0;\r\n  }\r\n}\r\n\r\n\r\nexport const setDateTime = (datetime: Date, addTime: number, timeOrDate: boolean) => {\r\n  const outDate = new Date(datetime.valueOf() + addTime * 60000);\r\n  if (timeOrDate) {\r\n    return outDate.getFullYear() + '-' + (outDate.getMonth() + 1) + '-' + outDate.getDate();\r\n  }\r\n  else {\r\n    if (outDate.getMinutes() > 9)\r\n      return outDate.getHours() + ':' + outDate.getMinutes();\r\n    else\r\n      return outDate.getHours() + ':0' + outDate.getMinutes();\r\n  }\r\n}\r\n\r\nexport const addMinute = (cd: Date, time: string) => {\r\n  const nd: Date = new Date(new Date(cd.getFullYear() + '-' + (cd.getMonth() + 1) + '-' + cd.getDate() + 'T' + time).valueOf() + 60000);\r\n  if (nd.getMinutes() > 9)\r\n    return nd.getHours() + ':' + nd.getMinutes();\r\n  else\r\n    return nd.getHours() + ':0' + nd.getMinutes();\r\n\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport useForm from 'react-hook-form';\r\nimport { DefaultPropsForm } from './Interface';\r\nimport { setDateTime, addMinute } from './NeedFunc';\r\nimport '../css/period.css';\r\n\r\nexport const IntervalForm = (props: DefaultPropsForm): React.ReactElement => {\r\n\r\n  const { register, handleSubmit, watch } = useForm();\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [curHideBut, setHideBut] = useState(true);\r\n\r\n\r\n  useEffect(() => {\r\n    setCurrentDate(new Date());\r\n  }, []);\r\n\r\n  const hideBut = () => {\r\n    setHideBut(!curHideBut);\r\n    console.log(curHideBut);\r\n  }\r\n\r\n  const actionSumbit = () => {\r\n    props.deleg2(watch('fromDate'), watch('fromTime'), watch('toDate'), watch('toTime'));\r\n    props.deleg1(\r\n      (\r\n        `?from=\"` + watch('fromDate') + `T` + watch('fromTime') +\r\n        `\"&to=\"` + watch('toDate') + `T` + addMinute(currentDate, watch('toTime')) + `\"`\r\n      )\r\n        .replace(\" \", \"\")\r\n    );\r\n  }\r\n\r\n  const formPeriod = (\r\n    <div>\r\n      <p>From:</p>\r\n      <form onSubmit={handleSubmit(actionSumbit)}>\r\n        <input\r\n          type='date'\r\n          name='fromDate'\r\n          ref={register}\r\n          defaultValue={setDateTime(currentDate, -10, true)}\r\n        />\r\n        <input\r\n          type='time'\r\n          name='fromTime'\r\n          ref={register}\r\n          defaultValue={setDateTime(currentDate, -10, false)}\r\n        />\r\n        <p>To:</p>\r\n        <input\r\n          type='date'\r\n          name='toDate'\r\n          ref={register}\r\n          defaultValue={setDateTime(currentDate, 0, true)}\r\n        />\r\n        <input\r\n          type='time'\r\n          name='toTime'\r\n          ref={register}\r\n          defaultValue={setDateTime(currentDate, 0, false)}\r\n        />\r\n        <br />\r\n        <input className=\"my-button\" type=\"submit\" value=\"Ok\" />\r\n      </form>\r\n\r\n    </div>\r\n  );\r\n\r\n  if (curHideBut)\r\n    return (\r\n      <div>\r\n        <button onClick={hideBut}>Выбрать период</button>\r\n      </div>\r\n\r\n    )\r\n  else {\r\n    return (\r\n      <div>\r\n        <button onClick={hideBut}>Скрыть</button>\r\n        {formPeriod}\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { DefaultDatetime } from './Interface';\r\n\r\nexport const Period = (props: DefaultDatetime): React.ReactElement | null => {\r\n\r\n  const [str, setStr] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setStr(props.fromTime + ' ' + props.fromDate + ' - ' + props.toTime + ' ' + props.toDate);\r\n  }, [])\r\n  \r\n  return (\r\n    <div>\r\n      <h1>Период: {str} </h1>\r\n    </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './css/index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n      <App />,\n    document.getElementById('root'),\n); \n\nserviceWorker.unregister();\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './css/App.css';\nimport { LineChart } from './components/LineGraph';\nimport { DefaultValues, zeroValues, DefaultGetData, DefaultDatetime } from './components/Interface';\nimport { URL } from './components/URL';\nimport { calcInterval } from './components/NeedFunc';\nimport { IntervalForm } from './components/IntervalForm';\nimport { Period } from './components/Period';\nimport { setDateTime } from './components/NeedFunc';\n\nexport const App = (): React.ReactElement => {\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [labels, setlabels] = useState<Array<string>>([]);\n  const [values, setValues] = useState<DefaultValues>(zeroValues);\n\n\n  const [fromDate, setFromDate] = useState<string>(setDateTime(new Date(),-60,true));\n  const [fromTime, setFromTime] = useState<string>(setDateTime(new Date(),-60,false));\n  const [toDate, setToDate] = useState<string>(setDateTime(new Date(),0,true));\n  const [toTime, setToTime] = useState<string>(setDateTime(new Date(),0,false));\n\n  const setInterval = (postURL: string) => {\n    console.log(URL + postURL);\n    setIsLoading(true);\n    axiosRequest(URL + postURL);\n  }\n\n  const setDate = (d1: string, t1: string, d2: string, t2: string) => {\n    setFromDate(d1);\n    setFromTime(t1);\n    setToDate(d2);\n    setToTime(t2);\n  }\n\n  useEffect(() => {\n    setIsLoading(true);\n    axiosRequest(URL);\n  }, [])\n\n  const axiosRequest = (url: string) => {\n    axios(url)\n      .then(response => {\n        setData(response);\n      })\n      .catch(error => {\n        console.log(\"error\", error);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n\n  }\n\n  const setData = (response: any) => {\n    setlabels(response.data.map((el: DefaultGetData, ind: number, data: Array<DefaultGetData>) => {\n      if (ind !== 0) {\n        const temp = Math.floor(calcInterval(Date.parse(data[ind - 1].datetime), Date.parse(el.datetime)));\n        if (temp >= 1) {\n          return Array(temp).fill(\"\");\n        }\n      }\n      return el.datetime;\n    }));\n    let minValues: Array<number> = response.data.map((el: DefaultGetData, ind: number, data: Array<DefaultGetData>) => {\n      if (ind !== 0) {\n        const temp = Math.floor(calcInterval(Date.parse(data[ind - 1].datetime), Date.parse(el.datetime)));\n        if (temp >= 1) {\n          return Array(temp).fill(0);\n        }\n      }\n      return el.minValue;\n    });\n    let middleValues: Array<number> = response.data.map((el: DefaultGetData, ind: number, data: Array<DefaultGetData>) => {\n      if (ind !== 0) {\n        const temp = Math.floor(calcInterval(Date.parse(data[ind - 1].datetime), Date.parse(el.datetime)));\n        if (temp >= 1) {\n          return Array(temp).fill(0);\n        }\n      }\n      return el.avgValue;\n    });\n    let maxValues: Array<number> = response.data.map((el: DefaultGetData, ind: number, data: Array<DefaultGetData>) => {\n      if (ind !== 0) {\n        const temp = Math.floor(calcInterval(Date.parse(data[ind - 1].datetime), Date.parse(el.datetime)));\n        if (temp >= 1) {\n          return Array(temp).fill(0);\n        }\n      }\n      return el.maxValue;\n    });\n    setValues({\n      min: minValues,\n      middle: middleValues,\n      max: maxValues,\n    });\n    setIsLoading(false);\n  }\n\n  const getLabels = (arr: Array<string>) => {\n    return arr.map((el, ind) => {\n      if (ind !== 0 && ind !== arr.length - 1) {\n        return \"\";\n      }\n      else return el.replace(\"T\", \" \").replace(/(:\\d*\\.\\d*)/, \"\");\n    });\n  }\n\n  if (!isLoading) {\n    return (\n      <div className=\"mainWindow\">\n        <div className=\"mainWindow-menu\">\n          <Period\n            fromDate={fromDate}\n            fromTime={fromTime}\n            toDate={toDate}\n            toTime={toTime}\n          />\n          <IntervalForm deleg1={setInterval} deleg2={setDate} />\n        </div>\n        <LineChart labels={getLabels(labels.flat())} values={values} ></LineChart>\n      </div>\n    );\n  }\n\n  else\n    return (\n      <div className=\"mainWindow\">\n        <h1>Получаем данные с платы</h1>\n      </div>\n    )\n}\n"],"sourceRoot":""}